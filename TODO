* MyISAM: Consider setting concurrent_insert to 2 on MySQL to make sure we don't
have nasty locking scenarios when there are holes in the middle
of the trigrams table. See:

http://dev.mysql.com/doc/refman/5.0/en/server-system-variables.html#sysvar_concurrent_insert

Or, as an alternate way of doing defragmentation that doesn't block the server
for ages like OPTIMIZE, perhaps can just rebuild trigrams for the most-recently
inserted trigram rows until fragmentation no longer in place? In concurrent_insert
mode 1, this should cause it to reallocate those trigram rows backwards into the hole.

* Probably should go back to using a separate trigrams table for each
searchable type. That would reduce the record size by a fair bit, and
simplify any later ideas along the lines of pre-scoped searches (i.e.
keeping student_school id in the trigrams table for student names).

* Maybe just find the matching trigram with the fewest associated
records, then do the search within the target table from there?
Like the second half of this answer:
http://stackoverflow.com/questions/3320698/what-is-the-best-way-to-implement-a-substring-search-in-sql/3320810#3320810
This has the disadvantage that if a user makes a typo
and the typo'd trigram is the winner, then they won't
see their desired record in the results, and who knows
if they'll then try to correct their search string or not.

* People are mostly going to be typing
in prefixes (or near prefixes) of words, maybe
I only need to make trigrams for the first 6-8 characters
of each word?

* Or better yet, can use something like the old Badger approach: compare user
input with Badger-variations of the first N (maybe 4-6 or so) characters of
each indexed word. Tho, this means that up until they type N characters, they
won't be able to get matches on anything that isn't actually a word less than
N characters long.

* Need to use a proper primary key if i'm using an
InnoDB table, otherwise I'm just being pointlessly wasteful.
See http://www.xaprb.com/blog/2006/07/04/how-to-exploit-mysql-index-optimizations/

* Can I detect what columns they're actually interested in selecting
from the active scope? As it is I'm forcing a select of all columns
from the target table.

* Possible TODO: Restore old average thing from the original code; the point
of that was to prefer short matches when given short query strings.
(i.e. "ama" should rank "Amad" higher than "Amalamadingdongwitcherydoo")
The average was between:
the number of trigrams in the query that matched the record, and
the number of trigrams in the record that matched the query!
